/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (28.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

//uniform bool _Blending_Mode;
uniform float _Sharpness_Size;
uniform float _Mixing;
//uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float saturate(float _Val)
{
    return clamp(_Val, 0.0, 1.0);
}

vec2 Fun_Border(vec2 In, vec2 _Size, float _Alpha)
{
    _Size *= vec2(fPixelWidth, fPixelHeight) * _Sharpness_Size;

    vec2 _Result;
    _Result.x = (
        texture2D(imgTexture, (In + _Size) ).a * 2.0 +
        texture2D(imgTexture, (In - _Size) ).a * 2.0 
    ) - _Alpha * 2.0;

    _Result.y = (
        texture2D(imgTexture, (In + _Size) ).a * 2.0 +
        texture2D(imgTexture, (In - _Size) ).a / 2.0 
    ) - _Alpha;

    return _Result;
}

void main(void)
{
    //vec2 In_Background = In;
    //if(_Is_Pre_296_Build == true && _Blending_Mode == true) In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    //vec4 _Render_Background = texture2D(bckgTexture, In_Background);

    vec4 _Result;
    vec2 _Result_Sharpness;

        //_Result_Sharpness = Fun_Border(In, 3.5, _Render_Texture.a);
        _Result.rgb = vec3(0.0, 0.5, 0.5);// - _Result_Sharpness.x * 0.3999;
        
        /* ############################# */
        _Result_Sharpness = Fun_Border(In, vec2(5.), _Render_Texture.a);
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 * (_Result_Sharpness.y + 0.1), saturate((0.25 - saturate(abs(_Result_Sharpness.x * 6.0))) * 0.2));

        _Result_Sharpness = Fun_Border(In, vec2(-5., 5.), _Render_Texture.a);
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 * (_Result_Sharpness.y), saturate((0.25 - saturate(abs(_Result_Sharpness.x * 6.0))) * 0.2));
        
        /* ############################# */

        /* ############################# */
        _Result_Sharpness = Fun_Border(In, vec2(4.95), _Render_Texture.a);
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 * (_Result_Sharpness.y + 0.1), saturate((0.25 - saturate(abs(_Result_Sharpness.x * 6.0))) * 1.5));

        vec2 _Result_Side_L = _Result_Sharpness;
        _Result_Sharpness = Fun_Border(In, vec2(-4.95, 4.95), _Render_Texture.a);
        vec2 _Result_Side_R = _Result_Sharpness;
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 * (_Result_Sharpness.y), saturate((0.25 - saturate(abs(_Result_Sharpness.x * 6.0))) * 0.5));
        
        /* ############################# */

        /* ############################# */
        _Result_Sharpness = Fun_Border(In, vec2(2.0), _Render_Texture.a) * 0.3;
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 + min(_Result_Sharpness.y - 0.09, 0.0), saturate(0.5 - saturate(abs(_Result_Sharpness.x * 6.0))));

        _Result_Sharpness = Fun_Border(In, vec2(-2.0, 2.0), _Render_Texture.a) * 0.3;
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 + min(_Result_Sharpness.y - 0.09, 0.0),  saturate(0.5 - saturate(abs(_Result_Sharpness.x * 6.0))));
        /* ############################# */

        /* ############################# */
        _Result_Sharpness = Fun_Border(In, vec2(1.85), _Render_Texture.a) * 0.3;
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 + min(_Result_Sharpness.y - 0.09, 0.0) + _Result_Side_L.y * 0.1, saturate((1.0 - saturate(abs(_Result_Sharpness.x * 6.0))) - (_Result_Side_L.y * 0.4)));

        _Result_Sharpness = Fun_Border(In, vec2(-1.85, 1.85), _Render_Texture.a) * 0.3;
        _Result.rgb = mix(_Result.rgb, vec3(184.0, 219.0, 219.0) / 255.0 + min(_Result_Sharpness.y - 0.09, 0.0), 1.0 - saturate(abs(_Result_Sharpness.x * 6.0)));
        /* ############################# */

        _Result.rgb = mix(_Render_Texture.rgb, _Result.rgb, _Mixing);
        _Result.a =  _Render_Texture.a;
    gl_FragColor = _Result;
}

//@End