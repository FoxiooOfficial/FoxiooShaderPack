/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (22.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform bool _Blending_Mode;
uniform float _Normal_Size;
uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    float _Y = _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;

    return _Y;
}

void main(void)
{
    vec2 In_Background = In;
    if(_Is_Pre_296_Build == true && _Blending_Mode == true) In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, In_Background);

    vec4 _Result = _Blending_Mode ? _Render_Background : _Render_Texture;

    vec2 _Off = _Normal_Size * vec2(fPixelWidth, fPixelHeight);
    float _Scale = _Mixing * max(1.0, _Normal_Size);
    
        vec2 _Emboss;

    if(_Blending_Mode == false)
    {
        vec3 _NW = texture2D(imgTexture, In + vec2(-_Off.x,  -_Off.y)).rgb * blendColor.rgb;
        vec3 _N  = texture2D(imgTexture, In + vec2(0.0,      -_Off.y)).rgb * blendColor.rgb;
        vec3 _NE = texture2D(imgTexture, In + vec2( _Off.x,  -_Off.y)).rgb * blendColor.rgb;
        vec3 _W  = texture2D(imgTexture, In + vec2(-_Off.x,   0.0))   .rgb * blendColor.rgb;
        vec3 _C  = texture2D(imgTexture, In)                          .rgb * blendColor.rgb;
        vec3 _E  = texture2D(imgTexture, In + vec2( _Off.x,   0.0))   .rgb * blendColor.rgb;
        vec3 _SW = texture2D(imgTexture, In + vec2(-_Off.x,  _Off.y)) .rgb * blendColor.rgb;
        vec3 _S  = texture2D(imgTexture, In + vec2(0.0,      _Off.y)) .rgb * blendColor.rgb;
        vec3 _SE = texture2D(imgTexture, In + vec2( _Off.x,  _Off.y)) .rgb * blendColor.rgb;

        _Emboss.x = ( Fun_Luminance(_NE) + 2.0 * Fun_Luminance(_E) + Fun_Luminance(_SE) ) - ( Fun_Luminance(_NW) + 2.0 * Fun_Luminance(_W) + Fun_Luminance(_SW) );
        _Emboss.y = ( Fun_Luminance(_SW) + 2.0 * Fun_Luminance(_S) + Fun_Luminance(_SE) ) - ( Fun_Luminance(_NW) + 2.0 * Fun_Luminance(_N) + Fun_Luminance(_NE) );
    }
    else
    {
        vec3 _NW = texture2D(bckgTexture, In + vec2(-_Off.x,  -_Off.y)).rgb;
        vec3 _N  = texture2D(bckgTexture, In + vec2(0.0,      -_Off.y)).rgb;
        vec3 _NE = texture2D(bckgTexture, In + vec2( _Off.x,  -_Off.y)).rgb;
        vec3 _W  = texture2D(bckgTexture, In + vec2(-_Off.x,   0.0))   .rgb;
        vec3 _C  = texture2D(bckgTexture, In)                          .rgb;
        vec3 _E  = texture2D(bckgTexture, In + vec2( _Off.x,   0.0))   .rgb;
        vec3 _SW = texture2D(bckgTexture, In + vec2(-_Off.x,  _Off.y)) .rgb;
        vec3 _S  = texture2D(bckgTexture, In + vec2(0.0,      _Off.y)) .rgb;
        vec3 _SE = texture2D(bckgTexture, In + vec2( _Off.x,  _Off.y)) .rgb;

        _Emboss.x = ( Fun_Luminance(_NE) + 2.0 * Fun_Luminance(_E) + Fun_Luminance(_SE) ) - ( Fun_Luminance(_NW) + 2.0 * Fun_Luminance(_W) + Fun_Luminance(_SW) );
        _Emboss.y = ( Fun_Luminance(_SW) + 2.0 * Fun_Luminance(_S) + Fun_Luminance(_SE) ) - ( Fun_Luminance(_NW) + 2.0 * Fun_Luminance(_N) + Fun_Luminance(_NE) );
    }

    vec3 _Normal = normalize(vec3(_Emboss.x, _Emboss.y, 1.0 / _Scale));
    _Normal = _Normal * 0.5 + 0.5;

        _Result.rgb = mix(_Result.rgb, _Normal, clamp(abs(_Mixing), 0.0, 1.0));
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End