/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (28.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform bool _Blending_Mode;
uniform float _Sharpness_Size;
uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_FMod(float _Value, float _Denom)
{
    return _Value - _Denom * floor(_Value / _Denom);
}

void main(void)
{
    vec2 In_Background = In;
    if(_Is_Pre_296_Build == true && _Blending_Mode == true) In_Background = vec2(In.x, 1.0 - In.y);


    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, In_Background);

    vec4 _Result;
    vec4 _Result_Sharpness;

        if(_Blending_Mode == false)
        {
            _Result = _Render_Texture;

            _Result_Sharpness = 5.0 * _Render_Texture - (
                texture2D(imgTexture, In + (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) * blendColor +
                texture2D(imgTexture, In - (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) * blendColor +
                texture2D(imgTexture, In + (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) * blendColor +
                texture2D(imgTexture, In - (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) * blendColor
            );
        }
        else
        {
            _Result = _Render_Background;

            _Result_Sharpness = 5.0 * _Render_Background - (
                texture2D(bckgTexture, In + (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) +
                texture2D(bckgTexture, In - (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) +
                texture2D(bckgTexture, In + (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight))) +
                texture2D(bckgTexture, In - (_Sharpness_Size * vec2(fPixelWidth, fPixelHeight)))
            );
        }
    _Result = mix(_Result, _Result_Sharpness, _Mixing);
    _Result.a *= _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End