/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (25.01.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _ShadowThreshold;
uniform float _ShadowAlpha;
uniform float _OutlineThreshold;
uniform float _OutlineAlpha;
uniform float _OutlineScale;
uniform float _OutlineAntialiasing;
uniform float _ColorSteps;
uniform float _Saturation;
uniform vec4 _OutlineColor;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec4 Fun_ColorRamp(vec4 _Color, float _Steps)
{
    _Color.rgb = floor(_Color.rgb * _Steps) / _Steps;
    return _Color;
}


void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

	vec4 _Result, _GradientX, _GradientY;
    
            if(_Blending_Mode == false)
            {
                _Result = texture2D(imgTexture, In) * blendColor * _Mixing;
            }
            else
            {
                _Result = texture2D(bckgTexture, In) * _Mixing;
            }
    
        float _Average = (_Result.r + _Result.g + _Result.b) / 3.0;
    
    // Saturation
    _Result.rgb = _Average * (1.0 - (_Saturation / 50.0)) + _Result.rgb * (_Saturation / 50.0);
    
    // Shadow
    if(_Average < _ShadowThreshold)
        _Result.rgb *= _Average + (1.0 - (_ShadowAlpha + _ShadowThreshold));
    
    
        // Outline
        if(_Blending_Mode == false)
        {
            _GradientX = texture2D(imgTexture, In + vec2(fPixelWidth, 0.0)) * blendColor - texture2D(imgTexture, In - vec2(fPixelWidth, 0.0)) * blendColor;
            _GradientY = texture2D(imgTexture, In + vec2(0.0, fPixelHeight)) * blendColor - texture2D(imgTexture, In - vec2(0.0, fPixelHeight)) * blendColor;
        }
        else
        {
 			_GradientX = texture2D(bckgTexture, In + vec2(fPixelWidth, 0.0)) - texture2D(bckgTexture, In - vec2(fPixelWidth, 0.0));
        	_GradientY = texture2D(bckgTexture, In + vec2(0.0, fPixelHeight)) - texture2D(bckgTexture, In - vec2(0.0, fPixelHeight));       
        }
    
    float _EdgeDetection = (length(_GradientX.rgb) + length(_GradientY.rgb)) * _OutlineScale;
    float _AntialiasedOutline = smoothstep(_OutlineThreshold - _OutlineAntialiasing, _OutlineThreshold + _OutlineAntialiasing, _EdgeDetection);
    
    if (_AntialiasedOutline > _OutlineThreshold)
    {
        _Result = mix(_Result, _OutlineColor, _OutlineAlpha * _AntialiasedOutline);
    }
    
    // Color Ramp
    _Result = Fun_ColorRamp(_Result, _ColorSteps);
    
    _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End