/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (20.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Seed;
uniform float _Speed;
uniform float _LineLength;
uniform float _Softness;
uniform float _Weirdness; 
uniform float _Radius;
uniform float _Freq;
uniform float _PointX;
uniform float _PointY;
uniform vec4 _Color;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Mod(float _Value, float _Denom)
{
    return _Value - _Denom * (_Value / _Denom);
}


float Fun_Hash21(vec2 _Pos) { return fract(sin(dot(_Pos, vec2(12.9898,78.233))) * 43758.5453); }
float Fun_Noise(vec2 _Pos, vec2 _Ran)

{       float _A = Fun_Hash21(floor(_Pos * _Ran + vec2(0.0, 0.0) + _Seed) / _Ran);
        float _B = Fun_Hash21(floor(_Pos * _Ran + vec2(1.0, 0.0) + _Seed) / _Ran);
        float _C = Fun_Hash21(floor(_Pos * _Ran + vec2(0.0, 1.0) + _Seed) / _Ran);
        float _D = Fun_Hash21(floor(_Pos * _Ran + vec2(1.0, 1.0) + _Seed) / _Ran);

    vec2 _Smooth = smoothstep((0.0), (1.0), vec2(Fun_Mod((_Pos.x * _Ran.x), 1.0), Fun_Mod((_Pos.y * _Ran.y), 1.0)));
    return mix(mix(_A, _B, _Smooth.y), mix(_C, _D, _Smooth.y), _Smooth.x);
}

float Fun_Noise(vec2 _Value)
{
    float _Sum = 0.0;

        for (int i = 1; i < 6; i++)
        {
            float _Pow = 2.0 * pow(2.0, float(i));
            _Sum += Fun_Noise(_Value + vec2(i, i), vec2(_Pow, _Pow)) / pow(2.0, float(i));
        }

    return _Sum;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

    vec4 _Render = _Blending_Mode ? _Render_Background : _Render_Texture;

    vec2 _UV = (In - vec2(_PointX, _PointY)) * 2.0;
    vec2 _UVZoom = vec2(    _Weirdness * length(_UV) + _Speed,    _Freq * atan(_UV.y, _UV.x) );

            float _Noise = Fun_Noise(_UVZoom);
            _Noise = length(_UV) - _Radius - _LineLength * (_Noise - 0.5);
            _Noise = smoothstep(-_Softness, _Softness, _Noise);

        vec4 _Result;

        _Result.rgb = mix(_Render.rgb, _Color.rgb, _Mixing * _Noise * _Render_Texture.a);
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
