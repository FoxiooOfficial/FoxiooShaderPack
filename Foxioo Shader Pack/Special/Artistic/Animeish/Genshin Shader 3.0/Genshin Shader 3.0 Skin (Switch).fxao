/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (12.02.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;
uniform sampler2D S2D_RimMap;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _NoLightMapStart;
uniform float _NoLightMapEnd;
uniform float _NoLightMapColorStart;
uniform float _NoLightMapColorEnd;
uniform float _FaceShadowStart;
uniform float _FaceShadowEnd;
uniform float _FaceShadowColorStart;
uniform float _FaceShadowColorEnd;
uniform float _FaceShadowThreshold;
uniform float _ShadowThreshold;
uniform float _FaceShadowAlpha;
uniform float _FaceColorMixing;
uniform float _LumSize;
uniform float _RimlightSize;

uniform bool _Blending_Mode;
uniform bool _NoLightEffect;

uniform vec4 _FaceColor;
uniform vec4 _RimLightColor;
uniform vec4 _ShadowColor;
uniform vec4 _ShadowColorSecond;

uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec3 Fun_Gradient(float _Lum, float _RampStart, float _RampEnd, vec3 _ColorStart, vec3 _ColorEnd)
{
    return mix(_ColorStart, _ColorEnd, clamp((_Lum - _RampStart) / (_RampEnd - _RampStart), 0.0, 1.0));
}

/* If no lightmp */
vec3 Fun_NoLightMap(float _Lum)
{
    return Fun_Gradient(_Lum, _NoLightMapStart, _NoLightMapEnd, vec3(_NoLightMapColorStart), vec3(_NoLightMapColorEnd));
}

/* ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; */

/* Base kolor */
vec3 Fun_BaseColor(float _Lum)
{
    return Fun_Gradient(_Lum, _FaceShadowStart, _FaceShadowEnd, vec3(_FaceShadowColorStart), vec3(_FaceShadowColorEnd)) * _FaceColor.rgb;
}

/* ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; */
    
/* Rim Light */

vec3 Fun_RimLight(vec2 In, vec2 rimCoords)
{
    float rimMask = step(_RimlightSize * _RimlightSize, dot(rimCoords, rimCoords));
    return rimMask * _RimLightColor.rgb;
}

/* ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; */

/* Face Shadows */
float Fun_FaceShadows(float _Lum)
{
    return 1.0 - step(_FaceShadowThreshold, _Lum);
}

/* +Shadows */
vec3 Fun_PlusShadows(float _Mix, vec3 _Color, float _Lum)
{
    vec3 _Render = _NoLightEffect ? Fun_NoLightMap(_Lum).rgb : _ShadowColor.rgb;
    return mix(_Color, _Color * _Render, _Mix);
}

vec3 Fun_SecondShadow(float _Mix, vec3 _Color)
{
    return mix(_Color, _Color * _ShadowColorSecond.rgb, _Mix);
}

/************************************************************/

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) * blendColor : texture2D(bckgTexture, In) * blendColor;
    vec4 _Render_RimMap = texture2D(S2D_RimMap, In);

    vec4 _Result = _Blending_Mode ? _Render_Background : _Render_Texture;

    float _Lum = dot(_Result.rgb, vec3(0.299, 0.587, 0.114)) * _LumSize;
    
    vec3 _BaseColor = Fun_BaseColor(_Lum);
    
    float _FaceShadowMask = Fun_FaceShadows(_Lum);
    vec3 _FaceShadowEffect = mix(_BaseColor, _BaseColor * _ShadowColor.rgb, _FaceShadowMask);
    
    vec3 _ShadowEffect = Fun_PlusShadows(_FaceColorMixing / mix(_Lum, 1.0, _FaceShadowAlpha), _FaceShadowEffect, _Lum);
    
    vec3 _SecondShadowEffect = Fun_SecondShadow(_ShadowThreshold, _ShadowEffect);
    
    vec3 _RimLightEffect = Fun_RimLight(In, _Render_RimMap.rg);

    _ShadowEffect = mix(_RimLightEffect, _SecondShadowEffect, _RimlightSize);
         
    _Result.rgb = mix(_Result.rgb, _ShadowEffect.rgb, _Mixing);
    _Result.a   = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End