/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (19.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform float _Segments;
uniform float _BlurScale;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec4 Fun_GetColor(vec2 In, sampler2D _Texture)
{
    return texture2D(_Texture, In);
}

vec4 Fun_Interpolation(vec2 In, float _Segm, sampler2D _Texture, float _Smoothness)
{
    vec2 _In_Segment = floor(In * _Segm) / _Segm;
    vec2 _In_Segment_Next = (floor(In * _Segm) + 1.0) / _Segm;
    
    vec2 _UV = fract(In * _Segm);

        vec4 _Render_0X = Fun_GetColor(_In_Segment, _Texture);
        vec4 _Render_1X = Fun_GetColor(vec2(_In_Segment_Next.x, _In_Segment.y), _Texture);
            
            vec4 _Render_X = mix(_Render_0X, _Render_1X, smoothstep(0.0, _Smoothness, _UV.x));


        vec4 _Render_0Y = Fun_GetColor(vec2(_In_Segment.x, _In_Segment_Next.y), _Texture);
        vec4 _Render_1Y = Fun_GetColor(_In_Segment_Next, _Texture);
       
            vec4 _Render_Y = mix(_Render_0Y, _Render_1Y, smoothstep(0.0, _Smoothness, _UV.x));

    return mix(_Render_X, _Render_Y, smoothstep(0.0, _Smoothness, _UV.y));
}

void main(void)
{
    vec2 UV = In;
    if(_Blending_Mode && _Is_Pre_296_Build) UV = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, UV);

    float _Div = (_Segments * _Mixing * fPixelWidth) == 0.0 ? 0.00001 : (_Segments * _Mixing * fPixelWidth);
    float _Segments_ = 1.0 / _Div;

    vec4 _Result = _Blending_Mode ? Fun_Interpolation(UV, _Segments_, bckgTexture, _BlurScale) : Fun_Interpolation(In, _Segments_, imgTexture, _BlurScale);
    vec4 _Render = _Blending_Mode ? _Render_Background : _Render_Texture;

    _Result.rgb = mix(_Render.rgb, _Render.rgb + _Result.rgb * _Result.rgb, _Mixing);
    
    if (_Blending_Mode) 
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
