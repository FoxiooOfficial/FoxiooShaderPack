/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.6 (19.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform float _Distance;
uniform int _Quality;
uniform float _Power;
uniform float _Alpha;
uniform int _Alpha_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

#define _BlurSize 30

void main(void)
{
    vec2 _Blur[_BlurSize];
    _Blur[0] = vec2(1.0, 0.000001);
    _Blur[1] = vec2(0.489074, -0.103956);
    _Blur[2] = vec2(0.913545, -0.406737);
    _Blur[3] = vec2(0.404509, -0.293893);
    _Blur[4] = vec2(0.669131, -0.743145);
    _Blur[5] = vec2(0.25, -0.433013);
    _Blur[6] = vec2(0.309017, -0.951057);
    _Blur[7] = vec2(0.0522642, -0.497261);
    _Blur[8] = vec2(-0.104529, -0.994522);
    _Blur[9] = vec2(-0.154509, -0.475528);
    _Blur[10] = vec2(-0.5, -0.866025);
    _Blur[11] = vec2(-0.334565, -0.371572);
    _Blur[12] = vec2(-0.809017, -0.587785);
    _Blur[13] = vec2(-0.456773, -0.203368);
    _Blur[14] = vec2(-0.978148, -0.207912);
    _Blur[15] = vec2(-0.5, 0.000001);
    _Blur[16] = vec2(-0.978148, 0.207912);
    _Blur[17] = vec2(-0.456773, 0.203368);
    _Blur[18] = vec2(-0.809017, 0.587786);
    _Blur[19] = vec2(-0.334565, 0.371572);
    _Blur[20] = vec2(-0.5, 0.866025);
    _Blur[21] = vec2(-0.154509, 0.475528);
    _Blur[22] = vec2(-0.104528, 0.994522);
    _Blur[23] = vec2(0.0522642, 0.497261);
    _Blur[24] = vec2(0.309017, 0.951056);
    _Blur[25] = vec2(0.25, 0.433013);
    _Blur[26] = vec2(0.669131, 0.743145);
    _Blur[27] = vec2(0.404508, 0.293893);
    _Blur[28] = vec2(0.913546, 0.406736);
    _Blur[29] = vec2(0.489074, 0.103956);

    vec2 _In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Result_Blur = texture2D(bckgTexture, _In_Background);

    for (int j = 0; j < 3; j++)
    {
        vec4 _Blur_Sum = vec4(0.0, 0.0, 0.0, 0.0);

        for (int i = 0; i < _BlurSize; i++)
        {
            vec2 _Offset_Add = _In_Background + ((vec2(fPixelWidth, fPixelHeight) * _Distance) * _Blur[i] / (3.0));
            vec2 _Offset_Sub = _In_Background - ((vec2(fPixelWidth, fPixelHeight) * _Distance) * _Blur[i] / (3.0));

            _Blur_Sum += texture2D(bckgTexture, _Offset_Add);
            _Blur_Sum += texture2D(bckgTexture, _Offset_Sub);
        }
        _Result_Blur += _Blur_Sum / (float(_BlurSize) * 2.0);
    }
    _Result_Blur /= (3.0) + 1.0;

    if (_Alpha_Mode == 1)
    {
        _Result_Blur.a *= ((_Result_Blur.r + _Result_Blur.g + _Result_Blur.b) / 3.0);
    }
    else if (_Alpha_Mode == 2)
    {
        _Result_Blur.a *= 1.0 - ((_Result_Blur.r + _Result_Blur.g + _Result_Blur.b) / 3.0);
    }

    vec4 _Result = pow(abs(_Result_Blur), vec4(_Power)) * _Mixing;

    gl_FragColor = _Result * _Alpha * texture2D(imgTexture, In) * blendColor;
}

//@End

