/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (15.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform vec4 _ColorShadow;
uniform vec4 _Color;
uniform vec4 _ColorLight;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Lum (vec4 _Result) { return (0.2126 * _Result.r + 0.7152 * _Result.g + 0.0722 * _Result.b); }

vec3 Fun_Outline(vec2 In, vec3 _Color)
{
    vec2 _PX = vec2(fPixelWidth, fPixelHeight);
    float _Alpha = texture2D(imgTexture, In).a;

    float aL1 = texture2D(imgTexture, In + vec2(-_PX.x, 0.0)).a;
    float aR1 = texture2D(imgTexture, In + vec2( _PX.x, 0.0)).a;
    float aU1 = texture2D(imgTexture, In + vec2(0.0, -_PX.y)).a;
    float aD1 = texture2D(imgTexture, In + vec2(0.0,  _PX.y)).a;

    float aL2 = texture2D(imgTexture, In + vec2(-_PX.x * 2.0, 0.0)).a;
    float aR2 = texture2D(imgTexture, In + vec2( _PX.x * 2.0, 0.0)).a;
    float aU2 = texture2D(imgTexture, In + vec2(0.0, -_PX.y * 2.0)).a;
    float aD2 = texture2D(imgTexture, In + vec2(0.0,  _PX.y * 2.0)).a;

        float _Edge1  = step(0.01, abs(aL1 - _Alpha) + abs(aR1 - _Alpha) + abs(aU1 - _Alpha) + abs(aD1 - _Alpha));
        float _Edge2 = step(0.01, abs(aL2 - _Alpha) + abs(aR2 - _Alpha) + abs(aU2 - _Alpha) + abs(aD2 - _Alpha));

    return mix(_Color, _Color + _Color * 0.25, _Edge1 * _Alpha) + _Edge2 * 0.15;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        float _Lum = pow(Fun_Lum(_Render_Texture), 2.0);
        float _Lum_Background = pow(Fun_Lum(_Render_Background), 2.0);

        vec4 _Result;

            _Result.rgb = mix(_ColorShadow.rgb, mix(_ColorLight.rgb, _Color.rgb, _Lum * _Lum), _Lum);

                vec2 _Center_Off = vec2(0.5, 1.0 - 0.2);
                vec2 _Center = vec2(0.5, 0.5);

                float _Dist = distance(In, _Center_Off);
                float _Dist_Cen = distance(In, _Center);

                        _Result.rgb += clamp(1.0 - (_Dist / 0.25), 0.0, 1.0) * 0.15;
                        _Result.rgb += clamp(1.0 - (_Dist / 0.75), 0.0, 1.0) * 0.35;

                    _Result.rgb += clamp((_Dist_Cen / 0.75), 0.0, 1.0) * 0.15;

                    /* Arc */
                        float _Inside = step(_Dist, 0.75);

                        float _Arc_Out = smoothstep(0.75 + 0.15, 0.75, _Dist);
                        _Result.rgb += _Arc_Out * (1.0 - _Inside) * 0.15;

                        float _Arc_In = smoothstep(0.75 - 0.4, 0.75, _Dist);
                        _Result.rgb += _Arc_In * (_Inside) * 0.15;

                    _Result.rgb = (Fun_Outline(In, _Result.rgb));

                float _Lum_Aero = Fun_Lum(vec4(_Result.rgb, 1.0));
                vec4 _Render_Background_Ex = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background - (_Lum_Aero * 0.25) + 0.125) : texture2D(bckgTexture, In - (_Lum_Aero * 0.25) + 0.125);                

            _Result.rgb += _Render_Background_Ex.rgb * _Lum * _Lum;
            _Result.rgb = mix(_Result.rgb, _Result.rgb * _Result.rgb * mix(vec3(1.0), _Result.rgb * _Lum, 0.5), vec3(0.85));

        _Result.a = _Render_Texture.a;
        _Result = mix(_Render_Texture, _Result * mix(1.0, _Lum, 0.1 * (1.0 - _Lum)), _Mixing);

    gl_FragColor = _Result;
}

//@End
