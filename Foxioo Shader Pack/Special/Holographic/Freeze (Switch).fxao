/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (20.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform sampler2D _Texture_Ice;
uniform sampler2D _Texture_Mask;
uniform float _Offset;
uniform float _Mixing;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    float _Y = _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;

    return _Y;
}

void main(void)
{
    vec2 _UV = In;
    if(_Blending_Mode && _Is_Pre_296_Build) _UV = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, _UV);
    vec4 _Render_Ice = texture2D(_Texture_Ice, In);
    vec4 _Render_Mask = texture2D(_Texture_Mask, In);

        vec4 _Result;
        vec4 _Render;

        vec2 _Pix = vec2(fPixelWidth, fPixelHeight);

        if(_Blending_Mode == false)
        {
            _Result = texture2D(imgTexture, fract(In + _Pix * (vec2(_Render_Ice.rb - 0.5) * _Render_Ice.b * _Offset))) * blendColor;
            _Render = _Render_Texture;
        }
        else
        {
            _Result = texture2D(bckgTexture, fract(_UV + _Pix * (vec2(_Render_Ice.rb - 0.5) * _Render_Ice.b * _Offset)));
            _Render = _Render_Background;
        }

        _Result.rgb = _Result.rgb * Fun_Luminance(_Render_Ice.rgb) + Fun_Luminance(_Render_Ice.rgb) * 0.75 * _Render_Ice.rgb;
        _Result.rgb += Fun_Luminance(_Render_Ice.rgb) * 0.35;

        _Result = mix(_Render, _Result, smoothstep(Fun_Luminance(_Render_Ice.rgb) * (1.0 - abs(_Mixing)), Fun_Luminance(_Render_Ice.rgb), abs(_Mixing) * (1.0 - _Render_Mask.r)));
        if(_Blending_Mode) _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
