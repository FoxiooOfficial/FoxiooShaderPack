/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (25.01.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _PosX;
uniform float _PosY;
uniform float _PointX; 
uniform float _PointY;
uniform float _RotX;
uniform float _ScaleX;
uniform float _ScaleY;
uniform float _Scale;        
uniform float _Intensity;
uniform bool _Blending_Mode;
uniform vec4 _Color;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_RotationX(vec2 _In)
{
    vec2 _UV = vec2((In.x - (_PointX + 0.5)) / 2.0, (In.y - (_PointY + 0.5)) / 2.0);
    float _RotX_ = -_RotX * (3.14159265 / 180.0);

        _UV = mat2(cos(_RotX_), sin(_RotX_), -sin(_RotX_), cos(_RotX_)) * _UV;

        _UV.y = 1.0 - _UV.y;

    return _UV;
}

float Fun_CalculateGlint(vec2 In, float _OffsetX, float _OffsetY, float _Scale, float _Intensity)
{
    return pow(1.0 - fract((sin((In.x - _OffsetX) * _Scale) / 2.0 + 0.5) * (cos((In.y + _OffsetY) * _Scale) / 2.0 + 0.5)), _Intensity);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

	vec2 _In = Fun_RotationX(In);
    vec2 _UV = vec2((_In.x + _PosX) * _ScaleX, (_In.y - _PosY) * _ScaleY) * _Scale;
    
    float _UV_Glint_1 = Fun_CalculateGlint(_UV, 0.3, 0.6, 0.75, _Intensity);
    float _UV_Glint_2 = Fun_CalculateGlint(_UV, 0.5, 1.5, 0.5, _Intensity);
    float _UV_Glint_3 = Fun_CalculateGlint(_UV, 0.66, -1.3, 0.25, _Intensity);
    
    float _UV_Glint_Sum = (_UV_Glint_1 + _UV_Glint_2 + _UV_Glint_3) / 3.0;
    
    vec4 _Result = _Blending_Mode ? _Render_Background : _Render_Texture;
    
    	_Result.a = _Render_Texture.a;
    
        _Result.rgb += _Color.rgb * _UV_Glint_Sum * _Mixing * _Result.a;

    gl_FragColor = _Result;
}

//@End

//@End
