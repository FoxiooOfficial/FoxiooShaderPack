/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (16.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _PosX;
uniform float _PosY;

uniform float _RotX;

uniform float _PointX;
uniform float _PointY;

uniform float _ScaleX;
uniform float _ScaleY;
uniform float _Scale;

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_RotationX(vec2 In, float _RotExtra, float _Scaler)
{
    vec2 _Points = vec2(_PointX, _PointY);
    vec2 _UV = In;
    float _RotX_Fix = (_RotX + _RotExtra) * (3.14159265 / 180.0) / _Scaler;

    mat2 _Mat = mat2(
        cos(_RotX_Fix), sin(_RotX_Fix),
        -sin(_RotX_Fix), cos(_RotX_Fix)
    );

    _UV = _Points + _Mat * (_UV - _Points);

    return _UV;
}

vec2 Fun_UV(float _UVRot, vec2 _UVPos, float _UVScaler, vec2 UV)
{
    UV = Fun_RotationX(UV, _UVRot, _UVScaler) + _UVPos / _UVScaler;
    UV = (UV - vec2(_PointX, _PointY)) * vec2(_ScaleX, _ScaleY) * _Scale + vec2(_PointX, _PointY);
    return fract(UV * _UVScaler);
}

void main(void)
{
    //vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    //vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec2 _Pos = vec2(_PosX, _PosY);
        vec4 _Result = vec4(0.0);

        vec4 _Render = texture2D(imgTexture, Fun_UV(236.0, _Pos, 3.0, In)) * blendColor;
        float _Lum = _Render.r * _Render.g * _Render.b * _Render.a;
        _Result += mix(_Render, _Render_Texture, _Lum);

        _Result += texture2D(imgTexture, Fun_UV(206.0, _Pos, 2.0, In)) * blendColor;
        _Result += texture2D(imgTexture, Fun_UV(127.0, _Pos, 1.0, In)) * blendColor;
        _Result += texture2D(imgTexture, Fun_UV(2.0, _Pos, 0.5, In)) * blendColor;

        _Result /= 3.0;

        _Result = mix(_Render_Texture, _Result, _Mixing);

    gl_FragColor = _Result;
}

//@End
