/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (08.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
//uniform sampler2D bckgTexture;
uniform sampler2D _Texture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;

uniform float _PosX;
uniform float _PosY;
uniform float _PosXEcho;
uniform float _PosYEcho;

uniform float _Scale;
uniform float _ScaleX;
uniform float _ScaleY;

uniform bool _Color;

uniform vec4 _ColorLight;
uniform vec4 _ColorShadow;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Lum (vec4 _Result) { return 0.2126 * _Result.r + 0.7152 * _Result.g + 0.0722 * _Result.b; }

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    //vec4 _Render_Background = texture2D(bckgTexture, In);

    /* Main Overlay */
        vec2 _UV = ((In * 0.0025 + vec2(_PosX, _PosY)) / vec2(fPixelWidth, fPixelHeight)) * vec2(_ScaleX, _ScaleY) * _Scale;
        _UV = fract(_UV);

            vec4 _Result = texture2D(_Texture, _UV);
            float _Lum = Fun_Lum(_Result);
            _Result.a = _Render_Texture.a;

            /* Sub Texture 1 */
            vec4 _Echo1 = texture2D(_Texture, _UV) * texture2D(imgTexture, In + (vec2(_PosXEcho, _PosYEcho) * vec2(fPixelWidth, fPixelHeight))) * blendColor;
                _Echo1.a = Fun_Lum(_Echo1);
                _Result += _Echo1;

            /* Sub Texture 2 */
            vec4 _Echo2 = texture2D(_Texture, _UV) * texture2D(imgTexture, In + (vec2(_PosXEcho * 2.0, _PosYEcho * 2.0) * vec2(fPixelWidth, fPixelHeight))) * blendColor;
                _Echo2.a = Fun_Lum(_Echo2);
                _Result += _Echo2 * 0.5;

        /* End */
        if(_Color) _Result.rgb = mix(_ColorShadow.rgb, _ColorLight.rgb, _Lum);

        _Result = mix(_Render_Texture, _Result, _Mixing);

    gl_FragColor = _Result;
}

//@End
