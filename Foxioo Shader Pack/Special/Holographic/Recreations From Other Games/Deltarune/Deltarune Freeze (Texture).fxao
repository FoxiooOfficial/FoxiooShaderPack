/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (13.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
// uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform vec4 _Color;
uniform float _Fade;
uniform float _PosXFreeze;
uniform float _PosYFreeze;
//uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void main(void)
{
    //vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    //vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Freeze_0 = vec4(vec3(_Color.rgb), texture2D(imgTexture, In).a);
        vec4 _Freeze_1 = vec4(vec3(_Color.rgb), texture2D(imgTexture, In - (vec2(_PosXFreeze, _PosYFreeze) * vec2(fPixelWidth, fPixelHeight))).a) * 0.5;
        vec4 _Freeze_2 = vec4(vec3(_Color.rgb), texture2D(imgTexture, In + (vec2(_PosXFreeze, _PosYFreeze) * vec2(fPixelWidth, fPixelHeight))).a) * 0.5;

        vec4 _Freeze_Sum = (_Freeze_0 + _Freeze_1 + _Freeze_2);
        if(_Fade < 1.0 - In.y) _Freeze_Sum = vec4(0.0);
        
           vec4 _Result = mix(_Render_Texture, _Render_Texture + _Freeze_Sum, _Mixing);

    gl_FragColor = _Result;
}

//@End
