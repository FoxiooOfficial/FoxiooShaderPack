/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (07.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Offset;
uniform float _Time;

uniform float _PointX;
uniform float _PointY;

uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

const float _Pi = 3.14159265359;
const int _Size = 6;

vec4 Fun_Vessel(sampler2D S2D, vec2 UV, vec4 _Mul)
{
    vec4 _Result = vec4(0.0, 0.0, 0.0, 1.0);
    vec2 _Pos = vec2(_PointX, _PointY);

        for(float i = 1.0; i < float(_Size); i++)  
        {
            float _T = i / float(_Size);
                vec2 _In = ((UV - _Pos) * fract(_Time + _T)) + _Pos;
                float _Alpha = abs(sin((_Time + _T) * _Pi));

                _Result += texture2D(S2D, fract(mix(UV, _In, _Offset))) * _Alpha * _Mul;
        }

    return _Result * 0.27;
}

void main(void)
{
    vec2 In_Background = In;
    if(_Is_Pre_296_Build == true && _Blending_Mode == true) In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, In_Background);

        vec4 _Render = _Blending_Mode ? _Render_Background : _Render_Texture;
        vec4 _Result = _Blending_Mode ? Fun_Vessel(bckgTexture, In_Background, vec4(1.0)) : Fun_Vessel(imgTexture, In, blendColor);

            _Result = mix(_Render, _Result, _Mixing);

        if(_Blending_Mode)
            _Result.a *= _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
