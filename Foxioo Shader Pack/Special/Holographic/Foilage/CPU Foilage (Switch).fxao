/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (01.02.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _PosX;
uniform float _PosY;
uniform float _PointX;
uniform float _PointY;
uniform float _RotX;
uniform float _ScaleX;
uniform float _ScaleY;
uniform float _Scale;
uniform bool _Blending_Mode;
uniform int _ChannelRed;
uniform int _ChannelGreen;
uniform int _ChannelBlue;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_RotationX(vec2 _In)
{
    vec2 _UV = vec2((_In.x - (_PointX + 0.5)) / 2.0, (_In.y - (_PointY + 0.5)) / 2.0);
    float _RotX_ = -_RotX * (3.14159265 / 180.0);

        _UV = mat2(cos(_RotX_), sin(_RotX_), -sin(_RotX_), cos(_RotX_)) * _UV;

        _UV.y = 1.0 - _UV.y;

    return _UV;
}

vec3 Fun_Rainbow(vec2 _In)
{
    const float _Frag = 6.28318;
    vec3 _Render;
    
    float _Red, _Green, _Blue;
    if(_ChannelRed == 0) _Red = _In.x;       else if (_ChannelRed == 1) _Red = 1.0 - _In.y;       else  _Red = In.x + (1.0 - _In.y);
    if(_ChannelGreen == 0) _Green = _In.x;   else if (_ChannelGreen == 1) _Green = 1.0 - _In.y;   else  _Green = In.x + (1.0 - _In.y);
    if(_ChannelBlue == 0) _Blue = _In.x;     else if (_ChannelBlue == 1) _Blue = 1.0 - _In.y;     else  _Blue = In.x + (1.0 - _In.y);
    
    _Render.r = sin(_Frag * _Red + 0.0) * 0.5 + 0.5;
    _Render.g = sin(_Frag * _Green + 2.0) * 0.5 + 0.5;
    _Render.b = sin(_Frag * _Blue + 4.0) * 0.5 + 0.5;

    return _Render;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result = _Blending_Mode ? _Render_Background : _Render_Texture;

        _Result.a = _Render_Texture.a;

        float _Average = (_Result.r + _Result.g + _Result.b) / 3.0;        

            vec2    _UV = Fun_RotationX(In * _Average),
                    _Scale_ = vec2(_ScaleX * _Scale, _ScaleY * _Scale),
                    _Pos = vec2(-_PosX, _PosY);

    vec3 _Render_Rainbow = Fun_Rainbow(vec2(_UV - _Pos) * _Scale_);

    _Result.rgb += _Render_Rainbow.rgb * _Average * _Mixing;

    gl_FragColor = _Result;
}

//@End