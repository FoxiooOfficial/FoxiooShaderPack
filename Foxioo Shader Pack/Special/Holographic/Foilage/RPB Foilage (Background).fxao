/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (29.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    float _Y = _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;

    return _Y;
}

void main(void)
{
    vec2 In_Background = In;

    if(_Is_Pre_296_Build == true)
        In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = (texture2D(imgTexture, In)) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, In_Background);

        vec4 _Result = _Render_Background * vec4(0.1, 1.0, 1.0, 1.0);

            vec3 _Render = texture2D(imgTexture, In + sin(Fun_Luminance(_Render_Texture.rgb + _Render_Background.rgb) * 3.14 + Fun_Luminance(_Render_Background.rgb) + Fun_Luminance(_Render_Texture.rgb)) * 0.05).rgb  * blendColor.rgb;

            const vec3 _ColorR = vec3(255.0, 70.0, 0.0) / 255.0;
            const vec3 _ColorG = vec3(128.0, 255.0, 132.0) / 255.0;
            const vec3 _ColorB = vec3(128.0, 0.0, 132.0) / 255.0;

            vec3        _RenderO = mix(_Render.rgb, _ColorR,  _Render.r * _Render.r);
                        _RenderO = mix(_RenderO.rgb, _ColorG, _Render.g * _Render.g);
                        _RenderO = mix(_RenderO.rgb, _ColorB, _Render.b * _Render.b);

            _Result.rgb = mix(_Result.rgb, _RenderO.rgb * 1.2 + (_Result.rgb * _Render_Texture.rgb) * 0.78, Fun_Luminance(_Render.rgb));
            _Result.rgb += mix(_Result.rgb, _RenderO, Fun_Luminance(_Render.rgb) * 1.5) * 0.25 * Fun_Luminance(_Render.rgb);

            _Result.rgb *= clamp(_Result.rgb + 0.5, 0.0, 1.0);

            _Result.rgb = mix(_Render_Texture.rgb,  _Result.rgb, _Mixing); 

        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
