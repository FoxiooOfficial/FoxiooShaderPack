/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (19.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;

uniform bool _Negative;
uniform float _Threshold;
uniform vec4 _ColorLight;
uniform vec4 _ColorShadow;

uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    float _Y = _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;

    return _Y;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result = vec4(0.0);

        _Result = _Blending_Mode ? _Render_Background : _Render_Texture;
        vec4 _Render = _Result;

            _Render.rgb = mix(_ColorShadow.rgb, _ColorLight.rgb, abs(float(_Negative) - (clamp(pow(Fun_Luminance(_Result.rgb + _Threshold), 150.0), 0.0, 1.0))));

        _Result.rgb = mix(_Result.rgb, _Render.rgb, _Mixing);
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
