/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (11.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    return _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build
        ? texture2D(bckgTexture, In_Background)
        : texture2D(bckgTexture, In);

    float _Lum = Fun_Luminance(_Render_Texture.rgb);
    float _LumBg = Fun_Luminance(_Render_Background.rgb);
    float _Render_Texture_Lum = Fun_Luminance(texture2D(imgTexture, In + (_Lum * 0.1 - _LumBg * 0.0025)).rgb);

    vec2 CD = In - 0.5 - _Lum * 0.1;
    float _Dist = length(CD);
    CD = vec2(smoothstep(0.5, 0.0, length(vec2(CD.x - 0.5, CD.y)) * 0.1 + cos(CD.y) * 0.1));
    CD = fract(CD / 2.0);
    CD = abs(CD * 2.0 - 1.0);

    const float _Frag = 6.28318;
    vec4 _CDOffset = vec4(
        sin(_Frag * CD.x + CD.y) * 0.5 + 0.5,
        sin(_Frag * CD.x + CD.y + 2.0) * 0.5 + 0.5,
        sin(_Frag * CD.x + CD.y + 4.0) * 0.5 + 0.5,
        1.0
    );

    vec4 _Result = _Is_Pre_296_Build
        ? texture2D(bckgTexture, In_Background + CD * 0.1)
        : texture2D(bckgTexture, In + CD * 0.1);

    _Result.rgb = mix(vec3(0.541, 0.611, 0.784) * _Result.rgb * 0.15,
                      vec3(0.529, 0.541, 0.568) + _Result.rgb * 0.5,
                      Fun_Luminance(_Result.rgb));

    _Result.rgb = mix(_Result.rgb,
                      vec3(0.541, 0.611, 0.784) * 0.5 + _Render_Texture.rgb * _Render_Texture_Lum * 0.1,
                      0.95 + _Lum * 0.05);

    vec3 _CDRainbow = vec3(
        sin(_Frag * atan((In.x + In.y) + (CD.x - CD.y) * 0.1 - _LumBg)) * 0.5 + 0.5,
        sin(_Frag * atan(((In.x - In.y) + (CD.x + CD.y) * 0.1 - _LumBg) * 1.2) + 2.0) * 0.5 + 0.5,
        sin(_Frag * atan(((In.x + In.y) + (CD.x - CD.y) * 0.1 - _LumBg) * 1.4) + 4.0) * 0.5 + 0.5
    );

    _Result.rgb += _CDRainbow * 0.1;
    _Result.rgb *= vec3(0.541, 0.611, 0.784);

    float _OrFreq = mix(300.0, 1000.0, _Dist * _LumBg);
    float _OrPtr = sin(_Dist * _OrFreq) * 0.5 + 0.5;
    _OrPtr = smoothstep(0.2, 0.5, _OrPtr);

    float _Angle = atan((In.y + _OrPtr * 0.01) - 0.5, (In.x + _OrPtr * 0.01) - 0.5);
    float _RayPattern = abs(sin(_Angle + (1.0 - (_LumBg - _Lum))));
    _RayPattern = smoothstep(0.0, 3.0 * _Lum,
                             0.5 * clamp(_RayPattern * _Lum * 0.25 *
                             abs(_LumBg - atan((In.y + _OrPtr * 0.01),
                                               _LumBg - (In.x + _OrPtr * 0.01))),
                             0.0, 1.0));

    _Result.rgb = mix(_Result.rgb, _Result.rgb + _CDOffset.rgb + _CDRainbow.rgb * 1.2, _RayPattern * 2.0);

    _RayPattern = abs(sin(_Angle * 2.0 + (_LumBg - _Lum)));
    _RayPattern = smoothstep(0.0, 10.0 * _Lum,
                             clamp(_RayPattern * _Lum * 0.25 *
                             abs(atan((_OrPtr * 0.01 - CD.y),
                                      (_OrPtr * 0.01 - CD.x))),
                             0.0, 1.0));

    _Result.rgb = mix(_Result.rgb, _Result.rgb + _CDOffset.rgb + _CDRainbow.rgb * 1.2, _RayPattern * 25.0);

    _Result.rgb = mix(_Result.rgb, _Result.rgb + _CDOffset.rgb * 1.5 * _Dist, _OrPtr * 0.05);

    _Result.rgb = mix(_Render_Texture.rgb, _Result.rgb, _Mixing);

    _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}


//@End