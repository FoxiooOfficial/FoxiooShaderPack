/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (19.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Seed;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec3 Fun_Hash21(vec3 _Color) 
{ 
    vec3 _Noise;
    _Noise.x = fract(_Seed + sin((_Color.x - _Seed) * 12.9898 + 78.233) * 43758.5453);
    _Noise.y = fract(_Seed + sin((_Color.y - _Seed) * 63.7264 + 10.873) * 73156.8473);
    _Noise.z = fract(_Seed + sin((_Color.z - _Seed) * 43.5276 + 37.735) * 12931.5923);

    return _Noise;
}

float Fun_Mod(float _X, float _Y)
{
    return _X - _Y * floor(_X / _Y);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Render = _Blending_Mode ? _Render_Background : _Render_Texture;
        vec4 _Result = _Render;

            _Result.rgb = Fun_Hash21(_Result.rgb);
            _Result.rgb = Fun_Hash21(1.0 - _Result.rgb);

                    int _Pixel = int(In.x / fPixelWidth);
                    
                    if(Fun_Mod(float(_Pixel), 2.0) == 0.0) _Result.rgb = _Result.gbr;
                    if(Fun_Mod(float(_Pixel), 3.0) == 0.0) _Result.rgb = _Result.brg;

                    _Result.rgb = Fun_Hash21(1.0 - _Result.rgb);

                    _Result.rgb = 1.0 - _Result.gbr;

            _Result.rgb = mix(_Render.rgb, _Result.rgb, _Mixing);
            _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
