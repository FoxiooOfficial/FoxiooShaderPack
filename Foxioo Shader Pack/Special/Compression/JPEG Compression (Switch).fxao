/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (13.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;
uniform bool _Blending_Mode;
uniform float _BlurScale;
uniform float _Segments;
uniform float _YLevels;
uniform float _CLevels;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Y(float _R, float _G, float _B)   {   return 0.299* _R + 0.587 * _G + 0.114 * _B;    }

float Fun_Cb(float _b, float _Y)            {   return 0.5 + (_b - _Y) * 0.564;    }
float Fun_Cr(float _r, float _Y)            {   return 0.5 + (_r - _Y) * 0.713;    }

vec3 Fun_YCbCr(float _Y, float _Cb, float _Cr)
{
    return vec3(
        _Y + 1.402 * (_Cr - 0.5),
        _Y - 0.344 * (_Cb - 0.5) - 0.714 * (_Cr - 0.5),
        _Y + 1.772 * (_Cb - 0.5)
    );
    
}
vec4 Fun_GetColor(vec2 In, sampler2D _Texture)  {    return texture2D(_Texture, In); }

vec4 Fun_Interpolation(vec2 In, float _Segm, sampler2D _Texture, float _Smoothness)
{
    vec2 _In_Segment = floor(In * _Segm) / _Segm;
    vec2 _In_Segment_Next = (floor(In * _Segm) + 1.0) / _Segm;
    
    vec2 _UV = fract(In * _Segm);

        vec4 _Render_0X = Fun_GetColor(_In_Segment, _Texture);
        vec4 _Render_1X = Fun_GetColor(vec2(_In_Segment_Next.x, _In_Segment.y), _Texture);
            
            vec4 _Render_X = mix(_Render_0X, _Render_1X, smoothstep(0.0, _Smoothness, _UV.x));


        vec4 _Render_0Y = Fun_GetColor(vec2(_In_Segment.x, _In_Segment_Next.y), _Texture);
        vec4 _Render_1Y = Fun_GetColor(_In_Segment_Next, _Texture);
       
            vec4 _Render_Y = mix(_Render_0Y, _Render_1Y, smoothstep(0.0, _Smoothness, _UV.x));

    return mix(_Render_X, _Render_Y, smoothstep(0.0, _Smoothness, _UV.y));
}

float Fun_Round(float _Result)
{
    return floor(_Result + 0.5);
}

float Quantize(float _V, float _Levels, float _Mixing)
{
    float _Quantize = Fun_Round(_V * _Levels) / _Levels;
    return mix(_V, _Quantize, _Mixing);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

        vec2 _In;
        if(_Is_Pre_296_Build && _Blending_Mode)
            _In = In_Background;
        else
            _In = In;


    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, _In);

        float _Div = (_Segments * _Mixing * fPixelWidth) == 0.0 ? 0.00001 : (_Segments * _Mixing * fPixelWidth);
        float _XSegments = 1.0 / _Div;

        vec4 _Result = _Blending_Mode ? Fun_Interpolation(_In, _XSegments, bckgTexture, _BlurScale) : Fun_Interpolation(In, _XSegments, imgTexture, _BlurScale);
        vec4 _Render = _Blending_Mode ? _Render_Background : _Render_Texture;

            float Y  = Fun_Y(_Result.r, _Result.g, _Result.b);
            float Cb = Fun_Cb(_Result.b, Y);
            float Cr = Fun_Cr(_Result.r, Y);
            float Yq  = Quantize(Y,  _YLevels, _Mixing);
            float Cbq = Quantize(Cb, _CLevels, _Mixing);
            float Crq = Quantize(Cr, _CLevels, _Mixing);

        _Result.rgb = Fun_YCbCr(Yq, Cbq, Crq);
        _Result.a   = _Render_Texture.a;

    gl_FragColor = _Result;
}
//@End
