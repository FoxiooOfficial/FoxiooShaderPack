/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (16.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Seed;
uniform float _PosX;
uniform float _PosY;
uniform float _Scale;
uniform float _ScaleX; 
uniform float _ScaleY;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Hash21(vec2 _Pos) { return fract(sin(dot(_Pos, vec2(12.9898,78.233))) * 43758.5453); }
float Fun_Noise(vec2 _Pos)
{
    vec2 _I = floor(_Pos + _Seed);    vec2 _F = fract(_Pos);

        float _A = Fun_Hash21(_I + vec2(0.0, 0.0) + _Seed);
        float _B = Fun_Hash21(_I + vec2(1.0, 0.0) + _Seed);
        float _C = Fun_Hash21(_I + vec2(0.0, 1.0) + _Seed);
        float _D = Fun_Hash21(_I + vec2(1.0, 1.0) + _Seed);

    vec2 _UV = _F * _F * (3.0 - 2.0 *_F);

    return mix(mix(_A, _B, _UV.x), mix(_C, _D, _UV.x), _UV.y);
}

vec3 Fun_NoiseGradient(vec2 _UV)
{
    vec2 _Offset = vec2(12.9898, 78.233);
    float _Noise = Fun_Noise(_UV * 1.0 / vec2(fPixelWidth, fPixelHeight) * 0.25);

    float _Noise1 = Fun_Noise((_UV * 1.5 / vec2(fPixelWidth, fPixelHeight) * 0.25 + _Offset.yx) * 1.17);
    float _Noise2 = Fun_Noise((_UV * 1.5 / vec2(fPixelWidth, fPixelHeight) * 0.25 - _Offset.xy) * 1.23);
    
    vec3 _Render = mix(vec3(_Noise1), vec3(_Noise2), _Noise) * 1.35;

    return _Render;
}

vec3 Fun_NoiseSat(vec3 _Color, float _Sat)
{
    float _Lum = dot(_Color, vec3(0.299, 0.587, 0.114));

    return mix(vec3(_Lum, _Lum, _Lum), _Color, _Sat);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec2 _UV = (In + vec2(_PosX, _PosY)) * vec2(_ScaleX, _ScaleY) * _Scale; 
        vec4 _Result = vec4(0.0);

            _Result.rgb = Fun_NoiseGradient(_UV);

                vec4 _Render = _Blending_Mode ? mix(_Render_Background, vec4(_Result.rgb, 0), _Mixing) : mix(_Render_Texture, vec4(_Result.rgb, 0), _Mixing);
                _Render.a = _Render_Texture.a;

    gl_FragColor = _Render;
}

//@End
