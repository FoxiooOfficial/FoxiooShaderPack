/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (07.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
//uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _PosX;
uniform float _PosY;

uniform float _RotX;

uniform float _PointX;
uniform float _PointY;

uniform float _Scale;
uniform float _ScaleX;
uniform float _ScaleY;

uniform int _Looping_Mode;
uniform float _Mixing;

uniform sampler2D _Texture_Red;
uniform float _Threshold_Red;
uniform float _Lower_Red;
uniform float _Upper_Red;

uniform sampler2D _Texture_Green;
uniform float _Threshold_Green;
uniform float _Lower_Green;
uniform float _Upper_Green;

uniform sampler2D _Texture_Blue;
uniform float _Threshold_Blue;
uniform float _Lower_Blue;
uniform float _Upper_Blue;

uniform sampler2D _Texture_Alpha;
uniform float _Threshold_Alpha;
uniform float _Lower_Alpha;
uniform float _Upper_Alpha;
//uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_RotationX(vec2 In)
{
    vec2 _Points = vec2(_PointX, _PointY);
    vec2 _UV = In;
    float _RotX_Fix = _RotX * (3.14159265 / 180.0);

    mat2 rotMat = mat2(
        cos(_RotX_Fix), sin(_RotX_Fix),
        -sin(_RotX_Fix), cos(_RotX_Fix)
    );

    _UV = _Points + rotMat * (_UV - _Points);

    return _UV;
}

void main(void)
{
    //vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    //vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

    vec2  _Pos = vec2(_PosX, _PosY),
            UV = Fun_RotationX((In + _Pos));
            UV = ((UV - vec2(_PointX, _PointY)) * vec2(_ScaleX, _ScaleY) * _Scale) + vec2(_PointX, _PointY);

            if (_Looping_Mode == 0)         {   UV = fract(UV);                          }
            else if(_Looping_Mode == 1)     {   UV = abs(fract(UV / 2.0) * 2.0 - 1.0);   }
            else if(_Looping_Mode == 2)     {   UV = clamp(UV, 0.0, 1.0);               }

        vec4 _Render_Mask = vec4(   texture2D(_Texture_Red, UV).r, 
                                        texture2D(_Texture_Green, UV).r, 
                                        texture2D(_Texture_Blue, UV).r, 
                                        texture2D(_Texture_Alpha, UV).r
                                    );

        vec4 _Result = _Render_Texture;

                vec4 _Threshold = vec4(_Threshold_Red, _Threshold_Green, _Threshold_Blue, _Threshold_Alpha);
                vec4 _Lower = _Threshold - vec4(_Lower_Red, _Lower_Green, _Lower_Blue, _Lower_Alpha);
                vec4 _Upper = _Threshold + vec4(_Upper_Red, _Upper_Green, _Upper_Blue, _Upper_Alpha);

                vec4 _Hold = clamp((_Render_Mask - _Lower) / (_Upper - _Lower), 0.0, 1.0);

            _Result *= _Hold;
            if (_Looping_Mode == 3 && (UV.x < 0.0 || UV.x > 1.0 || UV.y < 0.0 || UV.y > 1.0))    {   _Result = vec4(0.0);    }

        _Result = mix(_Render_Texture, _Result, _Mixing);

    gl_FragColor = _Result;
}

//@End