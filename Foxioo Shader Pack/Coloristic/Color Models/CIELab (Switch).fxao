/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (29.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform int _Blending_Mode;
uniform float _Mixing;
uniform float _Luminance;
uniform float _A;
uniform float _B;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

const float D65_X0 = 0.95047;
const float D65_Y0 = 1.0;
const float D65_Z0 = 1.08883;

const float _Threshold_1 = 0.04045;
const float _Threshold_2 = 0.008856;
const float _Threshold_3 = 0.2068966;

const float _LinearScale_1 = 1.0 / 12.92;
const float _LinearScale_2 = 1.0 / 1.055;
const float _LinearScale_3 = 1.0 / 7.787;
const float _LinearScale_4 = 16.0 / 116.0;

vec3 RGBtoLab(vec3 _Render)
{
    vec3 _RGB = _Render;
    _RGB.r = (_RGB.r <= _Threshold_1) ? _RGB.r * _LinearScale_1 : pow((_RGB.r + 0.055) * _LinearScale_2, 2.4);
    _RGB.g = (_RGB.g <= _Threshold_1) ? _RGB.g * _LinearScale_1 : pow((_RGB.g + 0.055) * _LinearScale_2, 2.4);
    _RGB.b = (_RGB.b <= _Threshold_1) ? _RGB.b * _LinearScale_1 : pow((_RGB.b + 0.055) * _LinearScale_2, 2.4);


    vec3 XYZ;
    XYZ.x = dot(_RGB, vec3(0.4124, 0.3576, 0.1805));
    XYZ.y = dot(_RGB, vec3(0.2126, 0.7152, 0.0722));
    XYZ.z = dot(_RGB, vec3(0.0193, 0.1192, 0.9505));

    XYZ.x /= D65_X0;
    XYZ.y /= D65_Y0;
    XYZ.z /= D65_Z0;

    float FX = (XYZ.x > _Threshold_2) ? pow(XYZ.x, 1.0/3.0) : (7.787 * XYZ.x + _LinearScale_4);
    float FY = (XYZ.y > _Threshold_2) ? pow(XYZ.y, 1.0/3.0) : (7.787 * XYZ.y + _LinearScale_4);
    float FZ = (XYZ.z > _Threshold_2) ? pow(XYZ.z, 1.0/3.0) : (7.787 * XYZ.z + _LinearScale_4);

    float L = 116.0 * FY - 16.0;
    float a = 500.0 * (FX - FY);
    float b = 200.0 * (FY - FZ);

    return vec3(L, a, b);
}

vec3 LabtoRGB(vec3 _LAB)
{
    float FY = (_LAB.x + 16.0) / 116.0;
    float FX = _LAB.y / 500.0 + FY;
    float FZ = FY - _LAB.z / 200.0;

    float X = (FX > _Threshold_3) ? FX*FX*FX : (FX - _LinearScale_4) * _LinearScale_3;
    float Y = (FY > _Threshold_3) ? FY*FY*FY : (FY - _LinearScale_4) * _LinearScale_3;
    float Z = (FZ > _Threshold_3) ? FZ*FZ*FZ : (FZ - _LinearScale_4) * _LinearScale_3;

    X *= D65_X0;
    Y *= D65_Y0;
    Z *= D65_Z0;

    vec3 _Render;
    _Render.r = dot(vec3(X, Y, Z), vec3(3.2406, -1.5372, -0.4986));
    _Render.g = dot(vec3(X, Y, Z), vec3(-0.9689, 1.8758, 0.0415));
    _Render.b = dot(vec3(X, Y, Z), vec3(0.0557, -0.2040, 1.0570));

    vec3 _Color;
    _Color.r = (_Render.r <= 0.0031308) 
        ? 12.92 * _Render.r 
        : 1.055 * pow(_Render.r, 1.0/2.4) - 0.055;
    _Color.g = (_Render.g <= 0.0031308) 
        ? 12.92 * _Render.g 
        : 1.055 * pow(_Render.g, 1.0/2.4) - 0.055;
    _Color.b = (_Render.b <= 0.0031308) 
        ? 12.92 * _Render.b 
        : 1.055 * pow(_Render.b, 1.0/2.4) - 0.055;


    return _Color;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In) * blendColor;

    vec4 _Render =    _Blending_Mode == 1 ? _Render_Background : _Render_Texture;
    vec4 _Result =    _Render;
	
            vec3 Lab = RGBtoLab(_Render.rgb);
    
    /* Luminance Adjustment */
        Lab.x = (Lab.x + (_Luminance - 50.0) * 2.0);

    /* A Adjustment */
        Lab.y += (_A - 50.0) * 2.0;

    /* B Adjustment */
        Lab.z += (_B - 50.0) * 2.0;

        _Render.rgb = LabtoRGB(Lab);

    /* Mixing */
        _Render.rgb = mix(_Result.rgb, _Render.rgb, _Mixing);
    
    _Render.a = _Render_Texture.a;

    gl_FragColor = _Render;
}

//@End
