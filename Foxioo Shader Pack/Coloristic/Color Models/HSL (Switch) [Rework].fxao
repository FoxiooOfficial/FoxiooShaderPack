/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.7 (08.03.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform int _Blending_Mode;
uniform float _Mixing;
uniform float _Hue;
uniform float _Saturation;
uniform float _Lightness;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_FMod(float a, float b) {
    return a - b * floor(a / b);
}
    
vec3 RGBtoHSL(vec3 _Render)
{
    float _CMax = max(_Render.r, max(_Render.g, _Render.b));
    float _CMin = min(_Render.r, min(_Render.g, _Render.b));
    float _Delta = _CMax - _CMin;

    float _H = 0.0;
    float _S = 0.0;
    float _L = (_CMax + _CMin) * 0.5;

    if (_Delta != 0.0)
    {
        _S = _Delta / (1.0 - abs(2.0 * _L - 1.0));

        if (_CMax == _Render.r)
        {
            _H = 60.0 * ((_Render.g - _Render.b) / _Delta);
        }
        else if (_CMax == _Render.g)
        {
            _H = 60.0 * ((_Render.b - _Render.r) / _Delta + 2.0);
        }
        else
        {
            _H = 60.0 * ((_Render.r - _Render.g) / _Delta + 4.0);
        }

        if (_H < 0.0) _H += 360.0;
    }
    
    return vec3(_H, _S, _L);
}

vec3 HSLtoRGB(float _H, float _S, float _L)
{
    float _C = (1.0 - abs(2.0 * _L - 1.0)) * _S;
	float _X = _C * (1.0 - abs((Fun_FMod(_H / 60.0, 2.0)) - 1.0));
    float _M = _L - _C * 0.5;
    
    vec3 _Render =    (_H < 60.0) ? vec3(_C, _X,  0) :
                      (_H < 120.0) ? vec3(_X, _C,  0) :
                      (_H < 180.0) ? vec3( 0, _C, _X) :
                      (_H < 240.0) ? vec3( 0, _X, _C) :
                      (_H < 300.0) ? vec3(_X,  0, _C) :
                      vec3(_C, 0, _X);
    
    return (_Render + _M);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In) * blendColor;

    vec4 _Render =    _Blending_Mode == 1 ? _Render_Background : _Render_Texture;
    vec4 _Result =    _Render;

    /* Hue Adjustment */
    vec3 _HSL = RGBtoHSL(_Render.rgb);
    _HSL.x = Fun_FMod(_HSL.x + _Hue, 360.0);

    if (_HSL.x < 0.0) { _HSL.x += 360.0; }

    _Render.rgb = HSLtoRGB(_HSL.x, _HSL.y, _HSL.z);

    /* Saturation Adjustment */
    float _Color = (_Render.r + _Render.g + _Render.b) / 3.0;
    _Render.rgb = mix(vec3(_Color), _Render.rgb, _Saturation / 50.0);

    /* Lightness Adjustment */
    _Render.rgb += (_Lightness - 50.0) / 50.0;

    /* Mixing */
    _Render.rgb = mix(_Result.rgb, _Render.rgb, _Mixing);
    
    _Render.a = _Render_Texture.a;

    gl_FragColor = _Render;
}

//@End
