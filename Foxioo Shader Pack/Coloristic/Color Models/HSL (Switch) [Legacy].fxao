/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.7 (17.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform bool _Blending_Mode;
uniform float _Hue;
uniform float _Saturation;
uniform float _Lightness;
uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

    vec4 _Render;
    vec4 _Result;

    if(_Blending_Mode == false)
    {
        _Render = _Render_Texture;
        _Result = _Render_Texture;
    }
    else
    {
        _Render = _Render_Background;
        _Result = _Render_Background;
    }

    /* Hue */

    float _Hue_Temp = mod((_Hue / 120.0), 3.0);
    if (_Hue_Temp < 0.0) _Hue_Temp = 3.0 - abs(_Hue_Temp);

        if (_Hue_Temp >= 0.0 && _Hue_Temp < 1.0)
        {
            _Render.r = _Result.r + (_Result.g - _Result.r) * _Hue_Temp;
            _Render.g = _Result.g + (_Result.b - _Result.g) * _Hue_Temp;
            _Render.b = _Result.b + (_Result.r - _Result.b) * _Hue_Temp;
        }

        else if (_Hue_Temp >= 1.0 && _Hue_Temp < 2.0)
        {
            _Render.r = _Result.g + (_Result.b - _Result.g) * (_Hue_Temp - 1.0);
            _Render.g = _Result.b + (_Result.r - _Result.b) * (_Hue_Temp - 1.0);
            _Render.b = _Result.r + (_Result.g - _Result.r) * (_Hue_Temp - 1.0);
        }

        else if (_Hue_Temp >= 2.0 && _Hue_Temp < 3.0)
        {
            _Render.r = _Result.b + (_Result.r - _Result.b) * (_Hue_Temp - 2.0);
            _Render.g = _Result.r + (_Result.g - _Result.r) * (_Hue_Temp - 2.0);
            _Render.b = _Result.g + (_Result.b - _Result.g) * (_Hue_Temp - 2.0);
        }

    /* Saturation */

    float _Color = (_Render.r + _Render.g + _Render.b) / 3.0;

        _Render.rgb = _Color * (1.0 - (_Saturation / 50.0)) + _Render.rgb * (_Saturation / 50.0);

    _Render.rgb += (_Lightness - 50.0) / 50.0;

    _Render.rgb = mix(_Result.rgb, _Render.rgb, _Mixing);

    _Render.a = _Render_Texture.a;

    gl_FragColor = _Render;
}

//@End