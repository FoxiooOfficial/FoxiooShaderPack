/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (17.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_FMod(float _Value, float _Denom)
{
    return _Value - _Denom * floor(_Value / _Denom);
}

float Fun_Luminance(vec3 _Result)
{
    const float _Kr = 0.299;
    const float _Kg = 0.587;
    const float _Kb = 0.114;

    float _Y = _Kr * _Result.r + _Kg * _Result.g + _Kb * _Result.b;

    return _Y;
}

vec3 RGBtoHSL(vec3 _Render)
{
    float _CMax = max(_Render.r, max(_Render.g, _Render.b));
    float _CMin = min(_Render.r, min(_Render.g, _Render.b));
    float _Delta = _CMax - _CMin;

        float _H = 0.0;
        float _S = 0.0;
        float _L = (_CMax + _CMin) * 0.5;

    if (_Delta != 0.0)
    {
        _S = _Delta / (1.0 - abs(2.0 * _L - 1.0));

        if (_CMax == _Render.r)
        {
            _H = 60.0 * ((_Render.g - _Render.b) / _Delta);
        }
        else if (_CMax == _Render.g)
        {
            _H = 60.0 * ((_Render.b - _Render.r) / _Delta + 2.0);
        }
        else
        {
            _H = 60.0 * ((_Render.r - _Render.g) / _Delta + 4.0);
        }

        if (_H < 0.0) _H += 360.0;
    }
    
    return vec3(_H, _S, _L);
}

vec3 HSLtoRGB(float _H, float _S, float _L)
{
    float _C = (1.0 - abs(2.0 * _L - 1.0)) * _S;
    float _X = _C * (1.0 - abs((Fun_FMod(_H / 60.0, 2.0)) - 1.0));
    float _M = _L - _C * 0.5;
    
    vec3 _Render =    (_H < 60.0) ? vec3(_C, _X,  0.0) :
                        (_H < 120.0) ? vec3(_X, _C,  0.0) :
                        (_H < 180.0) ? vec3( 0.0, _C, _X) :
                        (_H < 240.0) ? vec3( 0.0, _X, _C) :
                        (_H < 300.0) ? vec3(_X,  0.0, _C) :
                        vec3(_C, 0, _X);
    
    return (_Render + _M);
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result = vec4(0.0);
        vec4 _Render = vec4(0.0);

            if(_Blending_Mode == false) { _Result = _Render_Texture; }
            else { _Result = _Render_Background; }
            _Render = _Result;
        
        const float _HueTarget      = 120.0;
        const float _HueSize        = 90.0;
        const float _SaturationMin  = 0.15;
        const float _HueEnd         = 357.0;
        const float _HueEndAdd      = 0.25;
        const float _HueEndLift     = 0.05;

            vec3 _Fixed   = vec3(0, 0.3, 0) * Fun_Luminance(_Render.rgb);
            vec3 _HSL     = RGBtoHSL(clamp(_Render.rgb + _Fixed, 0.0, 1.0));
            vec3 _HSLEnd  = _HSL;

                float _Diff = abs(_HSLEnd.x - _HueTarget);
                _Diff = (_Diff > 180.0) ? 360.0 - _Diff : _Diff;

                vec3 _Mask;
                _Mask.x = smoothstep(0.0, 1.0, (1.0 - (_Diff / _HueSize)));
                _Mask.y = smoothstep(_SaturationMin, _SaturationMin + 0.25, _Mask.x);

            vec3 _Sum = clamp(_Render.rgb + _Fixed, 0.0, 1.0);
            float _DiffEx = ((_Sum.g - max(_Sum.r, _Sum.b)) * 3.0);
            _Mask.z = _Mask.x * _Mask.y * _DiffEx;

                vec3 _HueOut;
                _HueOut.x = _HueEnd;
                _HueOut.y = clamp(_HSLEnd.y + _HueEndAdd, 0.0, 1.0);
                _HueOut.z = clamp(_HSLEnd.z + _HueEndLift, 0.0, 1.0);

            vec3 _RenderHue = HSLtoRGB(_HueOut.x, _HueOut.y, _HueOut.z);

            _RenderHue.rb *= 1.2;
            _RenderHue.g *= 0.8;

            _Result.rgb = mix(_Render.rgb, _RenderHue, clamp(_Mask.z * _Mixing, 0.0, 1.0));
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End