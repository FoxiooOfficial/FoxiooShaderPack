/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (08.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform bool _Correction;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

mat3 Fun_Rw(vec3 _R0, vec3 _R1, vec3 _R2) {

    return mat3(
        _R0.x, _R1.x, _R2.x,
        _R0.y, _R1.y, _R2.y,
        _R0.z, _R1.z, _R2.z 
    );
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result;

        if(_Blending_Mode == false)
        {
            _Result = _Render_Texture;
        }
        else
        {
            _Result = _Render_Background;
        }

        vec3 _CorrectionColor = vec3(float(_Correction) * 2.0, 0, 0);

            mat3 _LMSConst = Fun_Rw(
                vec3(0.3592, 0.6976, -0.0358),
                vec3(-0.1922, 1.1004, 0.0755),
                vec3(0.0070, 0.0749, 0.8434)
            );

            vec3 _LMS = _Result.rgb * _LMSConst;

                const float _M1 = 2610.0 / 16384.0;
                const float _M2 = 2523.0 / 32.0;
                const float _C1 = 3424.0 / 4096.0;
                const float _C2 = 2413.0 / 128.0;
                const float _C3 = 2392.0 / 128.0;
                vec3 _LMSpq = pow( (_C1 + _C2 * pow(_LMS, vec3(_M1))) / (1.0 + _C3 * pow(_LMS, vec3(_M1))), vec3(_M2) );

            mat3 _ICtCpConst = Fun_Rw(
                vec3(0.5,   0.5,    0.0),
                vec3(1.6137, -3.3234, 1.7097),
                vec3(4.3780, -4.2455, -0.1325)
            );

            vec3 _ICtCp = _Result.rgb * _ICtCpConst;

        _Result.rgb = mix(_Result.rgb, _ICtCp - _CorrectionColor, _Mixing);

        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
