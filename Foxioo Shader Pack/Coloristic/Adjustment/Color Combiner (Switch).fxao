/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (14.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Blending_Mode;

uniform float _B;
uniform bool _B_Mode;
uniform sampler2D _Texture_B;
uniform float _C;
uniform bool _C_Mode;
uniform sampler2D _Texture_C;
uniform float _D;
uniform bool _D_Mode;
uniform sampler2D _Texture_D;

uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result = _Blending_Mode ? _Render_Background : _Render_Texture;
        vec4 _Render = _Result;

        /* (A - B) * C + D */
        //_Render =  _A_Mode ? tex2D(S2D_A, In) : _A;
        _Render -= _B_Mode ? texture2D(_Texture_B, In) * _B : vec4(_B);
        _Render *= _C_Mode ? texture2D(_Texture_C, In) * _C : vec4(_C);
        _Render += _D_Mode ? texture2D(_Texture_D, In) * _D : vec4(_D);

        _Result.rgb = mix(_Result.rgb, _Render.rgb, _Mixing); 
        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
