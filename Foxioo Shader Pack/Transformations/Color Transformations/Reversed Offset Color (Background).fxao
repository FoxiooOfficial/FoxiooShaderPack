/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (20.08.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _OffsetX;
uniform float _OffsetY;
uniform float _OffsetZ;

uniform float _PosX;
uniform float _PosY;

uniform float _Mixing;

uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, fract(In + vec2(_PosX, _PosY))) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, fract(In_Background + vec2(_PosX, _PosY))) : texture2D(bckgTexture, fract(In + vec2(_PosX, _PosY)));

    vec2 UV = In;
    
    vec4 _Result = vec4(0.0);
    vec4 _Render = vec4(0.0);


    if(_Blending_Mode == true) 
    { 
        UV.x += (_Render_Texture.r + (_Render_Texture.b * _OffsetZ)) * _OffsetX;
        UV.y += (_Render_Texture.g + (_Render_Texture.b * _OffsetZ)) * _OffsetY;
        vec2 _LUV = fract(UV);

        if(_Is_Pre_296_Build) { _LUV.y = fract(1.0 - UV.y); }
        
        _Result = texture2D(bckgTexture, _LUV);
        _Render = _Render_Texture;
    }
    else
    { 
        UV.x += (_Render_Background.r + (_Render_Background.b * _OffsetZ)) * _OffsetX;
        UV.y += (_Render_Background.g + (_Render_Background.b * _OffsetZ)) * _OffsetY;
        _Result = texture2D(imgTexture, fract(UV)); 
        _Render = _Render_Background;
    }
    
    _Result = mix(_Render, _Result, _Mixing);
    _Result.a *= _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End