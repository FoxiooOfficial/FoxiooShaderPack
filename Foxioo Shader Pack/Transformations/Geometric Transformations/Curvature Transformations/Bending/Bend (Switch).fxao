/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (06.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
    In = texCoord;
    gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

#define RAD 0.0174532925

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform vec4 blendColor;

/***********************************************************/
/* Variables */
/***********************************************************/

uniform float _PosX;
uniform float _PosY;

uniform float _RotX;

uniform float _PointX;
uniform float _PointY;

uniform float _ScaleX;
uniform float _ScaleY;
uniform float _Scale;

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform int _Looping_Mode;

uniform float _Angle;
uniform float _Start;
uniform float _TuneHead;
uniform float _TuneTail;

uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_RotationX(vec2 In)
{
    vec2 _Points = vec2(_PointX, _PointY);
    vec2 _UV = In;
    float _RotX_Fix = _RotX * (3.14159265 / 180.0);

    mat2 _Mat = mat2(
        cos(_RotX_Fix), sin(_RotX_Fix),
        -sin(_RotX_Fix), cos(_RotX_Fix)
    );

    _UV = _Points + _Mat * (_UV - _Points);

    return _UV;
}

vec2 Fun_Bend(vec2 In)
{
    vec2 _Point = vec2(_PointX, _PointY);
    vec2 _Center = In - _Point;
    float _Distance = length(_Center);
    
        float _Blend = ((_Distance - _Start) / (1.0 - _Start));
        float _Factor = step(_Start, _Distance);
    
            float _TuningFactor = mix(_TuneTail, mix(_TuneTail, _TuneHead, _Blend), _Factor);
    
    float _Ang = radians(_Angle) * _TuningFactor;
    vec2 _Os = vec2(cos(_Ang), sin(_Ang));
        
        mat2 _Rot = mat2(_Os.x, -_Os.y, _Os.y,  _Os.x);

        return _Rot * _Center + _Point;

}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, In);
    vec4 _Render;

    vec2 _Pos = vec2(_PosX, _PosY);
    vec2 UV;

        if(_Is_Pre_296_Build && _Blending_Mode)
            UV = Fun_RotationX(In_Background + _Pos);
        else
            UV = Fun_RotationX(In + _Pos);

        UV = ((UV - vec2(_PointX, _PointY)) * vec2(_ScaleX, _ScaleY) * _Scale) + vec2(_PointX, _PointY);

    UV = Fun_Bend(UV);

    if (_Looping_Mode == 0)
    {
        UV = fract(UV);
    }
    else if (_Looping_Mode == 1)
    {
        UV /= 2.0;
        UV = fract(UV);
        UV = abs(UV * 2.0 - 1.0);
    }
    else if(_Looping_Mode == 2)
    {
        UV = clamp(UV, 0.0, 1.0);
    }


    if(_Blending_Mode == false) {   _Render = texture2D(imgTexture, UV) * blendColor;  }
    else {                      _Render = vec4(texture2D(bckgTexture, UV).rgb, _Render_Texture.a);  }

        if (_Looping_Mode == 3 && (UV.x < 0.0 || UV.x > 1.0 || UV.y < 0.0 || UV.y > 1.0))
        {
            _Render = vec4(0.0);
        }
    gl_FragColor = _Render;
}

//@End