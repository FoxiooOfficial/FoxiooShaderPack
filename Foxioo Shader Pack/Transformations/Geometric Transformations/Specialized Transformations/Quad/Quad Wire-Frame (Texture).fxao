/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (16.07.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/***********************************************************/

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif

uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;

varying vec2 In;

void main(void)
{
    In = texCoord;
    gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/***********************************************************/

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Variables */
/***********************************************************/

uniform float _ScaleDeformX;
uniform float _ScaleDeformY;
uniform float _Size;
uniform vec4 _Color;
uniform float xA;
uniform float yA;
uniform float xB;
uniform float yB;
uniform float xC;
uniform float yC;
uniform float xD;
uniform float yD;
uniform float _Mixing;

/***********************************************************/
/* Main */
/***********************************************************/

vec2 Fun_Quad(vec2 UV)
{
    float a = (xA - UV.x) * (yB - UV.y) - (xB - UV.x) * (yA - UV.y);
    float b = (xB - UV.x) * (yC - UV.y) - (xC - UV.x) * (yB - UV.y);
    float c = (xC - UV.x) * (yD - UV.y) - (xD - UV.x) * (yC - UV.y);
    float d = (xD - UV.x) * (yA - UV.y) - (xA - UV.x) * (yD - UV.y);

    if (sign(a)==sign(b) && sign(b)==sign(c) && sign(c)==sign(d))
    {
        float a1 = xA;
        float a2 = xB - xA;
        float a3 = xD - xA;
        float a4 = xA - xB + xC - xD;

        float b1 = yA;
        float b2 = yB - yA;
        float b3 = yD - yA;
        float b4 = yA - yB + yC - yD;

        float aa = a4 * b3 - a3 * b4;
        float bb = a4 * b1 - a1 * b4 + a2 * b3 - a3 * b2 + UV.x * b4 - UV.y * a4;
        float cc = a2 * b1 - a1 * b2 + UV.x * b2 - UV.y * a2;

            float eps = 1e-6;
            float m;

                if (abs(aa) < eps) { m = -cc / bb; }
                else
                {
                    float det = sqrt(bb*bb - 4.0*aa*cc);
                    m = (-bb + det) / (2.0 * aa);
                }

        float denom = a2 + a4 * m;
        float l = (UV.x - a1 - a3 * m) / denom;

        return vec2(l, m);
    }
    else return vec2(-1.0);
}

void main(void)
{
    vec2 _In = Fun_Quad(In);
    float _Border = (_In.x <= 0.0 || _In.x >= 1.0 || _In.y <= 0.0 || _In.y >= 1.0) ? 0.0 : 1.0;

    vec4 _Render_Texture = texture2D(imgTexture, _In) * blendColor;
    vec4 _Render = vec4(0.0);

    vec2 _Pixel = vec2(fPixelWidth / _ScaleDeformX, fPixelHeight / _ScaleDeformY) * _Size;
        bool _Edge =    abs(_In.x) < _Pixel.x || abs(_In.y) < _Pixel.y ||
                        abs(_In.x - 1.0) < _Pixel.x || abs(_In.y - 1.0) < _Pixel.y ||
                        abs(_In.x - _In.y) < _Pixel.x || abs((_In.x + _In.y) - 1.0) < _Pixel.y;

    if (_Edge && (_In.x > 0.0 && _In.x < 1.0 && _In.y > 0.0 && _In.y < 1.0)) _Render = vec4(_Color.r, _Color.g, _Color.b, 1.0);
    else _Render = vec4(0.0);

    _Render = mix(_Render_Texture, _Render, _Mixing);

    gl_FragColor = _Render;
}

//@End