/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (23.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
    In = texCoord;
    gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

#define RAD 0.0174532925

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform vec4 blendColor;

/***********************************************************/
/* Variables */
/***********************************************************/

uniform float _PosX;
uniform float _PosY;

uniform float _RotX;

uniform float _PointX;
uniform float _PointY;

uniform float _ScaleX;
uniform float _ScaleY;
uniform float _Scale;

uniform float _Amp;
uniform float _Freq;
uniform float _Time;

uniform float _Mixing;
uniform bool _Blending_Mode;
uniform int _Looping_Mode;

uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec2 Fun_Ripple(vec2 In)
{
    vec2 _Center = vec2(_PointX, _PointY);
    vec2 _Rel = In - _Center;
    float _Ray = length(_Rel);

    vec2 _Result = mix(_Rel, _Rel + normalize(_Rel) * sin(_Ray * _Freq + _Time) * _Amp, _Mixing) + _Center;
    return _Result;
}


vec2 Fun_RotationX(vec2 In)
{
    vec2 _Points = vec2(_PointX, _PointY);
    vec2 _UV = In;
    float _RotX_Fix = _RotX * (3.14159265 / 180.0);

    mat2 rotMat = mat2(
        cos(_RotX_Fix), sin(_RotX_Fix),
        -sin(_RotX_Fix), cos(_RotX_Fix)
    );

    _UV = _Points + rotMat * (_UV - _Points);

    return _UV;
}


void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

        vec2 _Pos = vec2(_PosX, _PosY);
        vec2 _UV;

        if(_Is_Pre_296_Build && _Blending_Mode)
            _UV = Fun_RotationX(In_Background + _Pos);
        else
            _UV = Fun_RotationX(In + _Pos);

        _UV = ((_UV - vec2(_PointX, _PointY)) * vec2(_ScaleX, _ScaleY) * _Scale) + vec2(_PointX, _PointY);

    _UV = Fun_Ripple(_UV);


    if (_Looping_Mode == 0)
    {
        _UV = fract(_UV);
    }
    else if (_Looping_Mode == 1)
    {
        _UV /= 2.0;
        _UV = fract(_UV);
        _UV = abs(_UV * 2.0 - 1.0);
    }

    vec2 _UV_Background = vec2(_UV.x, 1.0 - _UV.y);

    vec4 _Render_Texture_UV = texture2D(imgTexture, _UV) * blendColor;
    vec4 _Render_Background_UV = texture2D(bckgTexture, _UV);

    vec4 _Result = _Blending_Mode ? _Render_Background_UV : _Render_Texture_UV;

        if (_Looping_Mode == 3 && (_UV.x < 0.0 || _UV.x > 1.0 || _UV.y < 0.0 || _UV.y > 1.0))
        {
            _Result = vec4(0.0);
        }

    _Result.a *= _Render_Texture_UV.a;

    gl_FragColor = _Result;
}

//@End