/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.0 (20.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Seed;
uniform float _PosX;
uniform float _PosY;
uniform float _PointX;
uniform float _PointY;
uniform float _Scale;
uniform float _ScaleX; 
uniform float _ScaleY;
uniform int _Looping_Mode;
uniform bool _Blending_Mode;
uniform float _OffsetX;
uniform float _OffsetY;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_Hash21(vec2 _Pos) { return fract(sin(dot(_Pos, vec2(12.9898,78.233))) * 43758.5453); }
float Fun_Noise(vec2 _Pos, float _SeedPlus)
{
    vec2 _I = floor(_Pos + _Seed + _SeedPlus);    vec2 _F = fract(_Pos);

        float _A = Fun_Hash21(_I + vec2(0.0, 0.0) + _Seed + _SeedPlus);
        float _B = Fun_Hash21(_I + vec2(1.0, 0.0) + _Seed + _SeedPlus);
        float _C = Fun_Hash21(_I + vec2(0.0, 1.0) + _Seed + _SeedPlus);
        float _D = Fun_Hash21(_I + vec2(1.0, 1.0) + _Seed + _SeedPlus);

    vec2 _UV = _F * _F * (3.0 - 2.0 *_F);

    return mix(mix(_A, _B, _UV.x), mix(_C, _D, _UV.x), _UV.y);
}

vec2 Fun_Noise_Replay(vec2 _Pos, vec2 _Off)
{
    _Pos = vec2(Fun_Noise(_Pos + _Off + Fun_Noise(_Pos + _Off * 0.5 + Fun_Noise(_Pos + _Off * 0.25, 1.0), 2.0), 3.0));

    return _Pos;
}
void main(void)
{
    vec2 _In = In;
    if(_Blending_Mode && _Is_Pre_296_Build) _In = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = texture2D(bckgTexture, _In);

    vec2 _UV = ((_In + vec2(_PosX, _PosY) - vec2(_PointX, _PointY)) * vec2(_ScaleX, _ScaleY) * _Scale) + vec2(_PointX, _PointY); 
        
        vec2 _Off = vec2(_OffsetX, _OffsetY);
        _UV = mix(_UV, vec2(Fun_Noise_Replay(_UV, _Off)), _Mixing);
        
        if(_Looping_Mode == 0)      {   _UV = fract(_UV);    }
        else if(_Looping_Mode == 1) {   _UV = abs(fract(_UV / 2.0) * 2.0 - 1.0); }
        else if(_Looping_Mode == 2) {   _UV = clamp(_UV, 0.0, 1.0); }

            vec4 _Result = _Blending_Mode ? texture2D(bckgTexture, _UV) : texture2D(imgTexture, _UV);

            if(_Blending_Mode) _Result.a *= _Render_Texture.a;
            if(_Looping_Mode == 3 && (_UV.x < 0.0 || _UV.x > 1.0 || _UV.y < 0.0 || _UV.y > 1.0))   _Result = vec4(0.0);

    gl_FragColor = _Result;
}

//@End
