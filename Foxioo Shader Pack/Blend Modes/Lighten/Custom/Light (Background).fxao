/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.7 (04.01.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Alpha;
uniform float _Brightness;
uniform float _Mixing_Brightness;
uniform float _Threshold;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

    _Render_Texture.rgb *= _Alpha * _Render_Texture.a;

    vec4 _Result = _Render_Texture;
    _Result.rgb *= _Brightness + (_Render_Background.rgb * _Mixing_Brightness);
    _Result.rgb += 1.0;

    if (_Result.a > _Threshold)
    {
        float _Alpha_Temp = ((_Result.r + _Result.g + _Result.b) / 3.0 - _Threshold) / (1.0 - _Threshold);
        vec4 _Lerp = mix(_Render_Background, vec4(1.0, 1.0, 1.0, _Result.a * 2.0), _Alpha_Temp);
        _Result.rgb *= _Lerp.rgb;
    }

    _Result.rgb *= (_Render_Texture.rgb * _Mixing) + _Render_Background.rgb;

    _Result.a = _Render_Texture.a * _Alpha * _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
