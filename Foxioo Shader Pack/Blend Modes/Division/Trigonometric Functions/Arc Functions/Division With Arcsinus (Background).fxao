/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.4 (23.09.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */


//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform float _Mul;
uniform int _Render_Switch;
uniform bool _Blending_Mode;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

vec4 Fun_Asin(vec4 _Color, int _Mod)
{  
    vec4 _2Color = _Color * (_Color * vec4(_Mod));
    return  (_Color + (_2Color * _Color) / 6.0 + (3.0 * _2Color * _2Color * _Color) / 40.0 + (5.0 * _2Color * _2Color * _2Color * _Color) / 112.0);
}

void main(void)
{
	vec2 In_Background = vec2(In.x, 1.0 - In.y);
	
	vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
	vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);
    vec4 _Result;

		// _Render_Switch = 0 (Asin mode from OpenGL)
        if (_Render_Switch == 0) 
		{
            if(_Blending_Mode == false)
                _Result = asin(_Render_Texture / (_Render_Background * _Mul));
            else
                _Result = asin((_Render_Background * _Mul) / _Render_Texture);
        }

		// _Render_Switch = 1 (Asin mode SYMULATED from Direct3D9)
		else if (_Render_Switch == 1) 
		{
            if(_Blending_Mode == false)
			    _Result = Fun_Asin(_Render_Texture / (_Render_Background * _Mul), -1);
            else
                _Result = Fun_Asin((_Render_Background * _Mul) / _Render_Texture, -1);
		}

		// _Render_Switch = 2 (Asin mode SYMULATED from Direct3D11)
		else if (_Render_Switch == 2) 
		{
            if(_Blending_Mode == false)
			    _Result = Fun_Asin(_Render_Texture / (_Render_Background * _Mul), 1);
            else
                _Result = Fun_Asin((_Render_Background * _Mul) / _Render_Texture, 1);
		}
        _Result.rgb = mix(_Render_Texture.rgb, _Result.rgb, _Mixing);
        _Result.a = _Render_Texture.a;
	gl_FragColor = _Result;
}

//@End
