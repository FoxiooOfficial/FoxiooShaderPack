/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.1 (07.01.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Variables */
/***********************************************************/

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

void Fun_ByteArray(out bool _Result[8], float _Color)
{
    int _Color_Temp = int(_Color * 255.0);

    int _Power[8];
    _Power[0] = 1;
    _Power[1] = 2;
    _Power[2] = 4;
    _Power[3] = 8;
    _Power[4] = 16;
    _Power[5] = 32;
    _Power[6] = 64;
    _Power[7] = 128;

    for (int i = 0; i < 8; ++i)
    {
        _Result[i] = mod(float(_Color_Temp / _Power[i]), 2.0) == 1.0;
    }
}

void Fun_Bitwise(out bool _Result[8], bool _Base[8], bool _Blend[8])
{
    for (int i = 0; i < 8; ++i)
    {
        _Result[i] = _Base[i] != _Blend[i];
    }
}

float Fun_ByteColor(bool _Blend[8])
{
    float _Result = 0.0;

    int _Power[8];
    _Power[0] = 1;
    _Power[1] = 2;
    _Power[2] = 4;
    _Power[3] = 8;
    _Power[4] = 16;
    _Power[5] = 32;
    _Power[6] = 64;
    _Power[7] = 128;

    for(int i = 0; i < 8; i++)
    {   
        if(_Blend[i]) { _Result += float(_Power[i]); }
    }

    return _Result / 255.0;
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In) * _Mixing;

    bool _Byte_Dummy[8];

        bool _Byte_Texture_Red[8];          Fun_ByteArray(_Byte_Texture_Red, _Render_Texture.r);
        bool _Byte_Texture_Green[8];        Fun_ByteArray(_Byte_Texture_Green, _Render_Texture.g);
        bool _Byte_Texture_Blue[8];         Fun_ByteArray(_Byte_Texture_Blue, _Render_Texture.b);
    
        bool _Byte_Background_Red[8];       Fun_ByteArray(_Byte_Background_Red, _Render_Background.r);
        bool _Byte_Background_Green[8];     Fun_ByteArray(_Byte_Background_Green, _Render_Background.g);
        bool _Byte_Background_Blue[8];      Fun_ByteArray(_Byte_Background_Blue, _Render_Background.b);

            Fun_Bitwise(_Byte_Texture_Red, _Byte_Texture_Red, _Byte_Background_Red);
            Fun_Bitwise(_Byte_Texture_Green, _Byte_Texture_Green, _Byte_Background_Green);
            Fun_Bitwise(_Byte_Texture_Blue, _Byte_Texture_Blue, _Byte_Background_Blue);

    vec4 _Result = vec4(0.0);

        _Result.r = Fun_ByteColor(_Byte_Texture_Red);
        _Result.g = Fun_ByteColor(_Byte_Texture_Green);
        _Result.b = Fun_ByteColor(_Byte_Texture_Blue);

        _Result.rgb = _Result.rgb * clamp(_Mixing, 0.0, 1.0);
        _Result.rgb += _Render_Texture.rgb * (1.0 - clamp(_Mixing, 0.0, 1.0));

    _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End