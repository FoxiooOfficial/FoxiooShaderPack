/***********************************************************/

/* Autor shader: Foxioo */
/* Version shader: 1.4 (07.01.2025) */
/* My GitHub: https://github.com/FoxiooOfficial */

/***********************************************************/

/* ####################################################### */

//@Begin_vertex

#ifdef GL_ES
 precision mediump float;
#endif
uniform mat4 transformMatrix;
uniform mat4 projectionMatrix;

attribute vec4 position;
attribute vec2 texCoord;
varying vec2 In;

void main(void)
{
	In = texCoord;
	gl_Position = projectionMatrix * transformMatrix * position;
}

//@End

/* ####################################################### */

//@Begin_fragment

#ifdef GL_ES
 precision mediump float;
#endif

varying vec2 In;

/***********************************************************/
/* Samplers */
/***********************************************************/

uniform sampler2D imgTexture;
uniform sampler2D bckgTexture;

uniform lowp vec4 blendColor;
uniform float fPixelWidth;
uniform float fPixelHeight;

/***********************************************************/
/* Varibles */
/***********************************************************/

uniform float _Mixing;
uniform bool _Is_Pre_296_Build;

/************************************************************/
/* Main */
/************************************************************/

float Fun_HardLight(float _Texture, float _Background)
{
    if(_Texture < 0.5)
    {
        return _Texture * (_Background * _Mixing);
    }
    else
    {
        return 1.0 - 2.0 * (1.0 - _Texture) * (1.0 - _Background * _Mixing);
    }
}

void main(void)
{
    vec2 In_Background = vec2(In.x, 1.0 - In.y);

    vec4 _Render_Texture = texture2D(imgTexture, In) * blendColor;
    vec4 _Render_Background = _Is_Pre_296_Build ? texture2D(bckgTexture, In_Background) : texture2D(bckgTexture, In);

        vec4 _Result;

            _Result.r = Fun_HardLight(_Render_Texture.r, _Render_Background.r);
            _Result.g = Fun_HardLight(_Render_Texture.g, _Render_Background.g);
            _Result.b = Fun_HardLight(_Render_Texture.b, _Render_Background.b);

            _Result.rgb = mix(_Render_Texture.rgb, _Result.rgb, _Mixing);

        _Result.a = _Render_Texture.a;

    gl_FragColor = _Result;
}

//@End
